plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.easyterview'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "2024.0.1")
}

dependencies {
	// --- Spring Boot Starter ---
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// --- OpenAPI (Swagger 문서 자동화) ---
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'

	// --- Database Driver ---
	runtimeOnly 'com.mysql:mysql-connector-j'

	// --- QueryDSL ---
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// --- JWT 인증 ---
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// --- AWS S3 Presigned URL 업로드 ---
	implementation 'software.amazon.awssdk:s3:2.31.16'

	// --- HTTP 클라이언트 ---
	implementation 'org.springframework:spring-web'

	// --- 개발 편의성 ---
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// --- MapStruct ---
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// --- 테스트 (주석처리된 항목들) ---
	// 필요 시 활성화
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

// --- QueryDSL QClass 경로 설정 ---
tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main").get().asFile
}

sourceSets {
	main.java.srcDirs += "$buildDir/generated/sources/annotationProcessor/java/main"
}

//  Spring Boot JAR 빌드 설정 --> ci/cd용 
tasks.named('bootJar') {
	enabled = true
}

tasks.named('jar') {
	enabled = false
}
